package com.criticalfusion.thenandnow.view{	import com.criticalfusion.thenandnow.controller.EraController;	import com.criticalfusion.thenandnow.controller.ScoreController;	import com.criticalfusion.thenandnow.event.DisplayItemEvent;	import com.criticalfusion.thenandnow.event.DisplayMessageEvent;	import com.criticalfusion.thenandnow.event.ScoresEvent;	import com.criticalfusion.thenandnow.model.EraModel;	import com.criticalfusion.thenandnow.model.IconList;	import com.criticalfusion.thenandnow.view.Era1Complete;	import com.criticalfusion.thenandnow.view.nav.BackButton;	import com.criticalfusion.thenandnow.view.nav.Early1900Button;	import com.criticalfusion.thenandnow.view.nav.ForwardButton;	import com.criticalfusion.thenandnow.view.nav.Late1880Button;	import com.criticalfusion.thenandnow.view.nav.Mid1900Button;	import com.criticalfusion.thenandnow.view.nav.PresentDayButton;	import com.criticalfusion.thenandnow.view.nav.PrintButton;	import com.greensock.TweenMax;	import com.greensock.easing.*;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.MovieClip;	import flash.display.Sprite;	import flash.events.Event;	import flash.geom.Matrix;	import flash.geom.Rectangle;	import flash.printing.PrintJob;	import flash.printing.PrintJobOptions;	import flash.text.TextField;	import flash.utils.getDefinitionByName;
		public class Main extends MovieClip	{		public var instructions:InstructionWindow;		public var forward_button:ForwardButton;		public var back_button:BackButton;		public var late_1880:Late1880Button;		public var early_1900:Early1900Button;		public var mid_1900:Mid1900Button;		public var present_day:PresentDayButton;		public var print_button:PrintButton;				public var choices_made:TextField;		public var choices_remaining:TextField;		public var choices_incorrect:TextField;		public var current_era:EraScene;		public var era1scene:Era1Scene;		public var era2scene:Era2Scene;		public var era3scene:Era3Scene;		public var era4scene:Era4Scene;				public var completedMessage:Sprite;				protected var icon_menu:IconMenu;		protected var era_controller:EraController;		protected var score_controller:ScoreController;		protected var iconlist:IconList;				public function Main()		{			super();			initialize();		}				final public function displayInstructions():void		{				instructions = new InstructionWindow();			instructions.visible = false;			instructions.startClicked = startClicked;			addChild(instructions);						TweenMax.to(instructions, .5, {y: -12, autoAlpha:1, ease:Sine.easeOut, startAt:{x:-18, y:50, alpha:0}});		}				final public function invalidateEra(init:Boolean = false):void		{			late_1880.onClick = activateLate1800;			early_1900.onClick = activateEarly1900;			mid_1900.onClick = activateMid1900;			present_day.onClick = activatePresent;						var era:String = era_controller.getCurrentEra();						if(init)			{				this.gotoAndStop(era);				switch(era)				{					case EraModel.PRESENT_DAY:						current_era = era4scene;						break;					case EraModel.MID_1900:						current_era = era3scene;						break;					case EraModel.EARLY_1900:						current_era = era2scene;						break;					case EraModel.LATE_1880:						current_era = era1scene;						break;				}			}			setEraButton(era);		}				final protected function setEraButton(value:String):void		{			switch(value)			{				case EraModel.PRESENT_DAY:					present_day.isEnabled = true;					break;				case EraModel.MID_1900:					mid_1900.isEnabled = true;					break;				case EraModel.EARLY_1900:					early_1900.isEnabled = true;					break;				case EraModel.LATE_1880:					late_1880.isEnabled = true;					break;				default:					present_day.isEnabled = false;					mid_1900.isEnabled = false;					early_1900.isEnabled = false;					late_1880.isEnabled = false;					current_era = null;					break;			}		}				final protected function setEra(value:String):Boolean		{			var completed:Boolean = era_controller.setCurrentEra(value);			this.gotoAndStop(value);			iconlist.invalidateIcons();			if(completed) onEraCompleted(new DisplayMessageEvent(DisplayMessageEvent.ERA_COMPLETED, value));			return completed;		}				final protected function onInstructionsOut():void		{			removeChild(instructions);			buildApp();		}				final protected function buildApp():void		{			TweenMax.to(forward_button, .5, {y:304, autoAlpha:1, startAt:{y:314, alpha:0}});			TweenMax.to(back_button, .5, {y:304, autoAlpha:1, startAt:{y:314, alpha:0}});						icon_menu = new IconMenu();			icon_menu.x = -258;			icon_menu.y = 273;			addChild(icon_menu);						icon_menu.buildMenu(iconlist.list);						forward_button.onClick = icon_menu.moveForward;			back_button.onClick = icon_menu.moveBackward;						invalidateEra(true);		}				final protected function startClicked():void		{			TweenMax.to(instructions, .7, {y:50, autoAlpha:0, ease:Back.easeIn, onComplete:onInstructionsOut});		}				final protected function onDisplayItem(event:DisplayItemEvent):void		{			event.stopImmediatePropagation();			current_era.showItem(event.name + "p");			era_controller.checkEraCompletion();		}				final protected function onEraCompleted(event:DisplayMessageEvent):void		{			icon_menu.lock();						if(completedMessage)			{				removeChild(completedMessage);				completedMessage = null;			}						switch(event.era)			{				case EraModel.PRESENT_DAY:					completedMessage = new Era4Complete();					Era4Complete(completedMessage).replayClick = onReplayApplication;					break;				case EraModel.MID_1900:					completedMessage = new Era3Complete();					break;				case EraModel.EARLY_1900:					completedMessage = new Era2Complete();					break;				case EraModel.LATE_1880:					completedMessage = new Era1Complete();					break;			}						completedMessage.x = -9;			completedMessage.y = 180;			completedMessage.alpha = 0;			addChild(completedMessage);						TweenMax.to(print_button, .5, {autoAlpha:1, startAt:{alpha:0}});			TweenMax.to(completedMessage, .5, {autoAlpha:1, y:163, ease:Sine.easeOut, onComplete:activateNext});		}				final protected function activateLate1800():void		{			onActivateEra(EraModel.LATE_1880, 'era1scene');		}				final protected function activateEarly1900():void		{			onActivateEra(EraModel.EARLY_1900, 'era2scene');		}				final protected function activateMid1900():void		{			onActivateEra(EraModel.MID_1900, 'era3scene');		}				final protected function activatePresent():void		{			onActivateEra(EraModel.PRESENT_DAY, 'era4scene');		}				final protected function onActivateEra(value:String, eraScene:String):void		{			var completed:Boolean = setEra(value);			current_era = this[eraScene];			if(completed) 				current_era.showCompleted();			else				messageOut();		}				final protected function messageOut():void		{			icon_menu.removeInfoBox();			TweenMax.to(print_button, .5, {autoAlpha:0});			if(completedMessage)				TweenMax.to(completedMessage, .5, {autoAlpha:0, y:180, ease:Back.easeIn, onComplete:removeMessage});		}				final protected function removeMessage():void		{			removeChild(completedMessage);			completedMessage = null;						icon_menu.unlock();		}				final protected function activateNext():void		{			invalidateEra();		}				final protected function onReplayApplication():void		{			era_controller.reset();			setEraButton(null);			invalidateEra(true);			messageOut();		}				final protected function onUpdateScores(event:ScoresEvent):void		{			event.stopImmediatePropagation();			choices_made.text = event.made.toString();			choices_remaining.text = event.remaining.toString();			choices_incorrect.text = event.incorrect.toString();		}				final protected function onPrint():void		{			var p:PrintJob = new PrintJob();			var options:PrintJobOptions = new PrintJobOptions();			options.printAsBitmap = true;			if(p.start())			{				if (964 > p.pageWidth) 				{					this.scaleY = this.scaleX = p.pageWidth / 964;				}				p.addPage(this, new Rectangle(-482, -363, 964, 726), options, this.currentFrame);				p.send();								p = null;				this.scaleY = this.scaleX = 1;			}					}				final protected function initialize():void		{			this.gotoAndStop(1);						forward_button.visible = false;			back_button.visible = false;			print_button.visible = false;			print_button.onClick = onPrint;						late_1880.isEnabled = false;			early_1900.isEnabled = false;			mid_1900.isEnabled = false;			present_day.isEnabled = false;						era_controller = EraController.getInstance();			era_controller.addEventListener(DisplayItemEvent.DISPLAY_ITEM, onDisplayItem, false, 0, true);			era_controller.addEventListener(DisplayMessageEvent.ERA_COMPLETED, onEraCompleted, false, 0, true);						score_controller = ScoreController.getInstance();			score_controller.addEventListener(ScoresEvent.UPDATE_SCORES, onUpdateScores, false, 0, true);			score_controller.getScores();						iconlist = IconList.getInstance();		}	}}